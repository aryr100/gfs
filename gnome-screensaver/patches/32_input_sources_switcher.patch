--- a/src/gs-lock-plug.c
+++ b/src/gs-lock-plug.c
@@ -36,14 +36,17 @@
 #include <gdk/gdkx.h>
 #include <gtk/gtk.h>
 
-#ifdef WITH_KBD_LAYOUT_INDICATOR
-#include <libgnomekbd/gkbd-indicator.h>
-#endif
+#define GNOME_DESKTOP_USE_UNSTABLE_API
+#include <libgnome-desktop/gnome-xkb-info.h>
 
 #include "gs-lock-plug.h"
 
 #include "gs-debug.h"
 
+#define INPUT_SOURCES_SCHEMA "org.gnome.desktop.input-sources"
+#define SOURCES_KEY          "sources"
+#define CURRENT_KEY          "current"
+
 #define GDM_FLEXISERVER_COMMAND "gdmflexiserver"
 #define GDM_FLEXISERVER_ARGS    "--startnew Standard"
 
@@ -83,7 +86,10 @@
         GtkWidget   *auth_switch_button;
         GtkWidget   *auth_logout_button;
 
-        GtkWidget   *auth_prompt_kbd_layout_indicator;
+        GSettings   *input_sources_settings;
+        GtkWidget   *input_sources_label;
+        GPtrArray   *input_sources;
+        guint        input_source;
 
         int          kbd_lock_mode;
         gboolean     switch_enabled;
@@ -1446,6 +1452,135 @@
         g_free (name);
 }
 
+struct InputSource
+{
+        gchar    *name;
+        gboolean  unique;
+        guint     subscript;
+        guint     index;
+};
+
+typedef struct InputSource InputSource;
+
+static void
+input_source_free (gpointer data)
+{
+        InputSource *input_source = data;
+        g_free (input_source->name);
+        g_free (data);
+}
+
+static void
+input_sources_current_changed_cb (GSettings *settings,
+                                  gchar     *key,
+                                  gpointer   user_data)
+{
+        GSLockPlug *plug = GS_LOCK_PLUG (user_data);
+        guint current = g_settings_get_uint (settings, CURRENT_KEY);
+        guint i;
+
+        for (i = 0; i < plug->priv->input_sources->len; i++) {
+                InputSource *input_source = g_ptr_array_index (plug->priv->input_sources, i);
+
+                if (input_source->index == current) {
+                        if (!input_source->unique) {
+                                gchar *markup = g_markup_printf_escaped ("%s<sub><small>%u</small></sub>", input_source->name, input_source->subscript);
+                                gtk_label_set_markup (GTK_LABEL (plug->priv->input_sources_label), markup);
+                                g_free (markup);
+                        } else {
+                                gtk_label_set_text (GTK_LABEL (plug->priv->input_sources_label), input_source->name);
+                        }
+
+                        break;
+                }
+        }
+}
+
+static void
+gs_lock_plug_init_input_sources (GSLockPlug *plug)
+{
+        GnomeXkbInfo *xkb_info;
+        GVariant *sources;
+        GVariantIter iter;
+        const gchar *type;
+        const gchar *name;
+        guint current;
+        guint i;
+
+        if (plug->priv->input_sources != NULL)
+                return;
+
+        plug->priv->input_sources_settings = g_settings_new (INPUT_SOURCES_SCHEMA);
+        sources = g_settings_get_value (plug->priv->input_sources_settings, SOURCES_KEY);
+        current = g_settings_get_uint (plug->priv->input_sources_settings, CURRENT_KEY);
+
+        plug->priv->input_sources = g_ptr_array_new_full (g_variant_n_children (sources), input_source_free);
+        plug->priv->input_source = 0;
+
+        xkb_info = gnome_xkb_info_new ();
+
+        g_variant_iter_init (&iter, sources);
+        for (i = 0; g_variant_iter_next (&iter, "(&s&s)", &type, &name); i++) {
+                if (g_strcmp0 (type, "xkb") == 0) {
+                        InputSource *input_source;
+                        const gchar *short_name;
+                        gint j;
+
+                        gnome_xkb_info_get_layout_info (xkb_info, name, NULL, &short_name, NULL, NULL);
+
+                        input_source = g_new0 (InputSource, 1);
+                        input_source->name = g_strdup (short_name);
+                        input_source->unique = TRUE;
+                        input_source->subscript = 1;
+                        input_source->index = i;
+
+                        if (g_strcmp0 (g_getenv ("XDG_CURRENT_DESKTOP"), "Unity") == 0)
+                                input_source->name[0] = g_ascii_toupper (input_source->name[0]);
+
+                        for (j = plug->priv->input_sources->len - 1; j >= 0; j--) {
+                                InputSource *input_source_j = g_ptr_array_index (plug->priv->input_sources, j);
+
+                                if (g_strcmp0 (input_source_j->name, input_source->name) == 0) {
+                                        input_source_j->unique = FALSE;
+                                        input_source->unique = FALSE;
+                                        input_source->subscript = input_source_j->subscript + 1;
+                                        break;
+                                }
+                        }
+
+                        if (input_source->index == current)
+                                plug->priv->input_source = plug->priv->input_sources->len;
+
+                        g_ptr_array_add (plug->priv->input_sources, input_source);
+                }
+        }
+
+        g_object_unref (xkb_info);
+        g_variant_unref (sources);
+
+        g_signal_connect (plug->priv->input_sources_settings,
+                          "changed::" CURRENT_KEY,
+                          G_CALLBACK (input_sources_current_changed_cb),
+                          plug);
+}
+
+static gboolean
+layout_indicator_clicked_cb (GtkWidget *widget,
+                             GdkEvent  *event,
+                             gpointer   user_data)
+{
+        GSLockPlug *plug;
+        InputSource *input_source;
+
+        plug = GS_LOCK_PLUG (user_data);
+        plug->priv->input_source++;
+        plug->priv->input_source %= plug->priv->input_sources->len;
+        input_source = g_ptr_array_index (plug->priv->input_sources, plug->priv->input_source);
+        g_settings_set_uint (plug->priv->input_sources_settings, CURRENT_KEY, input_source->index);
+
+        return TRUE;
+}
+
 static void
 create_page_one (GSLockPlug *plug)
 {
@@ -1453,6 +1588,7 @@
         GtkWidget            *vbox;
         GtkWidget            *vbox2;
         GtkWidget            *hbox;
+        GtkWidget            *hbox2;
 
         gs_profile_start ("page one");
 
@@ -1473,10 +1609,6 @@
         gtk_box_pack_start (GTK_BOX (hbox), vbox2, TRUE, TRUE, 0);
         gtk_container_set_border_width (GTK_CONTAINER (vbox2), 10);
 
-#ifdef WITH_KBD_LAYOUT_INDICATOR
-        gtk_box_pack_start (GTK_BOX (hbox), plug->priv->auth_prompt_kbd_layout_indicator, FALSE, FALSE, 0);
-#endif
-
         /* Change appearance if we're running under Unity */
         if (g_getenv ("XDG_CURRENT_DESKTOP") &&
             strcmp (g_getenv ("XDG_CURRENT_DESKTOP"), "Unity") == 0) {
@@ -1491,11 +1623,38 @@
                 gtk_misc_set_alignment (GTK_MISC (plug->priv->auth_prompt_label), 0, 0);
                 gtk_box_pack_start (GTK_BOX (vbox2), plug->priv->auth_prompt_label, FALSE, FALSE, 0);
 
+                hbox2 = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
                 plug->priv->auth_prompt_entry = gtk_entry_new ();
-                gtk_box_pack_start (GTK_BOX (vbox2), plug->priv->auth_prompt_entry, TRUE, TRUE, 6);
 
                 gtk_label_set_mnemonic_widget (GTK_LABEL (plug->priv->auth_prompt_label),
                                                plug->priv->auth_prompt_entry);
+                gtk_box_pack_start (GTK_BOX (hbox2), plug->priv->auth_prompt_entry, TRUE, TRUE, 6);
+
+                /* Layout indicator */
+#ifdef WITH_KBD_LAYOUT_INDICATOR
+                gs_lock_plug_init_input_sources (plug);
+
+                if (plug->priv->input_sources->len > 1) {
+                        GtkWidget *layout_indicator;
+
+                        layout_indicator = gtk_event_box_new ();
+                        plug->priv->input_sources_label = gtk_label_new (NULL);
+                        input_sources_current_changed_cb (plug->priv->input_sources_settings, CURRENT_KEY, plug);
+                        g_signal_connect (layout_indicator, "button-release-event", G_CALLBACK (layout_indicator_clicked_cb), plug);
+                        gtk_widget_set_size_request (layout_indicator, 50, 40);
+
+                        gtk_container_add (GTK_CONTAINER (layout_indicator), plug->priv->input_sources_label);
+                        gtk_box_pack_start (GTK_BOX (hbox2),
+                                            layout_indicator,
+                                            FALSE,
+                                            FALSE,
+                                            6);
+
+                        gtk_widget_show_all (hbox2);
+                }
+#endif
+
+                gtk_box_pack_start (GTK_BOX (vbox2), hbox2, TRUE, TRUE, 6);
 
                 plug->priv->auth_capslock_label = gtk_label_new ("");
                 gtk_misc_set_alignment (GTK_MISC (plug->priv->auth_capslock_label), 0, 0.5);
@@ -1514,11 +1673,38 @@
                 gtk_misc_set_alignment (GTK_MISC (plug->priv->auth_prompt_label), 0, 0.5);
                 gtk_box_pack_start (GTK_BOX (vbox2), plug->priv->auth_prompt_label, FALSE, FALSE, 0);
 
+                hbox2 = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
                 plug->priv->auth_prompt_entry = gtk_entry_new ();
-                gtk_box_pack_start (GTK_BOX (vbox2), plug->priv->auth_prompt_entry, TRUE, TRUE, 0);
 
                 gtk_label_set_mnemonic_widget (GTK_LABEL (plug->priv->auth_prompt_label),
                                            plug->priv->auth_prompt_entry);
+                gtk_box_pack_start (GTK_BOX (hbox2), plug->priv->auth_prompt_entry, TRUE, TRUE, 6);
+
+                /* Layout indicator */
+#ifdef WITH_KBD_LAYOUT_INDICATOR
+                gs_lock_plug_init_input_sources (plug);
+
+                if (plug->priv->input_sources->len > 1) {
+                        GtkWidget *layout_indicator;
+
+                        layout_indicator = gtk_event_box_new ();
+                        plug->priv->input_sources_label = gtk_label_new (NULL);
+                        input_sources_current_changed_cb (plug->priv->input_sources_settings, CURRENT_KEY, plug);
+                        g_signal_connect (layout_indicator, "button-release-event", G_CALLBACK (layout_indicator_clicked_cb), plug);
+                        gtk_widget_set_size_request (layout_indicator, 50, 40);
+
+                        gtk_container_add (GTK_CONTAINER (layout_indicator), plug->priv->input_sources_label);
+                        gtk_box_pack_start (GTK_BOX (hbox2),
+                                            layout_indicator,
+                                            FALSE,
+                                            FALSE,
+                                            6);
+
+                        gtk_widget_show_all (hbox2);
+                }
+#endif
+
+                gtk_box_pack_start (GTK_BOX (vbox2), hbox2, TRUE, TRUE, 0);
 
                 plug->priv->auth_capslock_label = gtk_label_new ("");
                 gtk_misc_set_alignment (GTK_MISC (plug->priv->auth_capslock_label), 0.5, 0.5);
@@ -1595,8 +1781,6 @@
         plug->priv->vbox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
         gtk_container_add (GTK_CONTAINER (plug->priv->frame), plug->priv->vbox);
 
-        plug->priv->auth_prompt_kbd_layout_indicator = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
-
         /* Notebook */
         plug->priv->notebook = gtk_notebook_new ();
         gtk_notebook_set_show_tabs (GTK_NOTEBOOK (plug->priv->notebook), FALSE);
@@ -1609,33 +1793,6 @@
 
         gtk_widget_show_all (plug->priv->frame);
 
-        /* Layout indicator */
-#ifdef WITH_KBD_LAYOUT_INDICATOR
-        if (plug->priv->auth_prompt_kbd_layout_indicator != NULL) {
-                XklEngine *engine;
-
-                engine = xkl_engine_get_instance (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()));
-                if (xkl_engine_get_num_groups (engine) > 1) {
-                        GtkWidget *layout_indicator;
-
-                        layout_indicator = gkbd_indicator_new ();
-                        gkbd_indicator_set_parent_tooltips (GKBD_INDICATOR (layout_indicator), TRUE);
-                        gtk_box_pack_start (GTK_BOX (plug->priv->auth_prompt_kbd_layout_indicator),
-                                            layout_indicator,
-                                            FALSE,
-                                            FALSE,
-                                            6);
-
-                        gtk_widget_show_all (layout_indicator);
-                        gtk_widget_show (plug->priv->auth_prompt_kbd_layout_indicator);
-                } else {
-                        gtk_widget_hide (plug->priv->auth_prompt_kbd_layout_indicator);
-                }
-
-                g_object_unref (engine);
-        }
-#endif
-
         if (plug->priv->auth_switch_button != NULL) {
                 if (plug->priv->switch_enabled) {
                         gtk_widget_show_all (plug->priv->auth_switch_button);
@@ -1705,6 +1862,19 @@
 
         g_return_if_fail (plug->priv != NULL);
 
+        if (plug->priv->input_sources != NULL)
+                g_ptr_array_unref (plug->priv->input_sources);
+
+        if (plug->priv->input_sources_label != NULL) {
+                g_signal_handlers_disconnect_by_data (plug->priv->input_sources_label, plug);
+                g_object_unref (plug->priv->input_sources_label);
+        }
+
+        if (plug->priv->input_sources_settings != NULL) {
+                g_signal_handlers_disconnect_by_data (plug->priv->input_sources_settings, plug);
+                g_object_unref (plug->priv->input_sources_settings);
+        }
+
         g_free (plug->priv->logout_command);
 
         remove_response_idle (plug);
--- a/configure.ac
+++ b/configure.ac
@@ -66,7 +66,8 @@
 
 PKG_CHECK_MODULES(GNOME_SCREENSAVER_DIALOG,
         gthread-2.0
-        gtk+-3.0 >= $GTK_REQUIRED_VERSION)
+        gtk+-3.0 >= $GTK_REQUIRED_VERSION
+        gnome-desktop-3.0 >= $GNOME_DESKTOP_REQUIRED_VERSION)
 AC_SUBST(GNOME_SCREENSAVER_DIALOG_CFLAGS)
 AC_SUBST(GNOME_SCREENSAVER_DIALOG_LIBS)
 
